# Makefile for 'school' executable

# Compiler
CC = gcc

# Source files
SRC = $(wildcard *.c)

# Object files
OBJ = $(SRC:.c=.o)

# Executable name
NAME = school

# Program for deleting files
RM = rm -f

# Compiler flags
CFLAGS = -Wall -Werror -Wextra -pedantic

# Default rule
all: $(NAME)

# Rule for building the executable
$(NAME): $(OBJ)
	$(CC) $(OBJ) -o $(NAME) $(CFLAGS)

# Rule for cleaning Emacs and Vim temporary files along with the executable
clean:
	$(RM) *~ $(NAME)

# Rule for cleaning object files
oclean:
	$(RM) $(OBJ)

# Rule for cleaning Emacs and Vim temporary files, the executable, and object files
fclean: clean
	$(RM) $(NAME)

# Rule for forcing recompilation of all source files
re: fclean all

# Rule for compiling source files into object files
%.o: %.c
	$(CC) -c $< -o $@ $(CFLAGS)

# Check if the header file 'm.h' is missing
ifeq ($(wildcard m.h),)
$(error Header file 'm.h' is missing!)
endif

